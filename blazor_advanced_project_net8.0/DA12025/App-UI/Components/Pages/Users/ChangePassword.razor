@page "/change-password"

@using Services.Interfaces
@using Services.Models

@inject IUserService UserService
@inject ISessionService SessionService
@inject NavigationManager NavigationManager

<h1>Change Password</h1>

@if (alertVisible)
{
    <div class="alert alert-@alertType alert-dismissible fade show" role="alert">
        <strong>@alertMessage</strong>
        <button type="button" class="btn-close" aria-label="Close" @onclick="ToggleAlertVisibility"></button>
    </div>
}
<EditForm Model="@changePasswordDto" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator/>
    <div class="form-group mb-xl-3">
        <label for="old-password">Old Password</label>
        <input type="password" class="form-control mt-1" id="old-password" @bind="changePasswordDto.OldPassword"/>
        <ValidationMessage For="@(() => changePasswordDto.OldPassword)"/>
    </div>
    <div class="form-group mb-xl-3">
        <label for="new-password">New Password</label>
        <input type="password" class="form-control mt-1" id="new-password" @bind="changePasswordDto.NewPassword"/>
        <ValidationMessage For="@(() => changePasswordDto.NewPassword)"/>
    </div>
    <div class="form-group mb-xl-3">
        <label for="retype-new-password">Retype New Password</label>
        <input type="password" class="form-control mt-1" id="retype-new-password"
               @bind="changePasswordDto.RetypedNewPassword"/>
        <ValidationMessage For="@(() => changePasswordDto.RetypedNewPassword)"/>
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
</EditForm>

@code {
    private ChangePasswordDTO changePasswordDto;
    private string loggedUserEmail = "";
    private bool alertVisible = false;
    private string alertMessage = "";
    private string alertType = "";

    protected override void OnInitialized()
    {
        if (SessionService.GetLoggedUser() != null!)
        {
            changePasswordDto = new ChangePasswordDTO("", "", "", "");
            loggedUserEmail = SessionService.GetLoggedUser().Email;
            changePasswordDto.UserEmail = loggedUserEmail;
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void OnSubmit()
    {
        try
        {
            UserService.ChangePassword(changePasswordDto);
            alertVisible = true;
            alertMessage = "Password changed successfully";
            alertType = "success";
            ClearForm();
        }
        catch (ArgumentException e)
        {
            alertVisible = true;
            alertMessage = e.Message;
            alertType = "danger";
        }
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/");
    }

    private void ToggleAlertVisibility()
    {
        alertVisible = !alertVisible;
    }

    private void ClearForm()
    {
        changePasswordDto = new ChangePasswordDTO("", "", "", "");
    }

}